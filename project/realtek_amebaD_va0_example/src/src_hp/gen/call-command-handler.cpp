/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <stdint.h>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

using namespace chip;

EmberAfStatus emberAfBasicClusterServerCommandParse(EmberAfClusterCommand * cmd);
EmberAfStatus emberAfIdentifyClusterClientCommandParse(EmberAfClusterCommand * cmd);
EmberAfStatus emberAfIdentifyClusterServerCommandParse(EmberAfClusterCommand * cmd);
EmberAfStatus emberAfOnOffClusterServerCommandParse(EmberAfClusterCommand * cmd);
EmberAfStatus emberAfThermostatClusterServerCommandParse(EmberAfClusterCommand * cmd);


static EmberAfStatus status(bool wasHandled, bool clusterExists, bool mfgSpecific)
{
    if (wasHandled)
    {
        return EMBER_ZCL_STATUS_SUCCESS;
    }
    else if (mfgSpecific)
    {
        return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
    }
    else if (clusterExists)
    {
        return EMBER_ZCL_STATUS_UNSUP_COMMAND;
    }
    else
    {
        return EMBER_ZCL_STATUS_UNSUPPORTED_CLUSTER;
    }
}


// Main command parsing controller.
EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand * cmd)
{
    EmberAfStatus result = status(false, false, cmd->mfgSpecific);
    if (cmd->direction == (uint8_t) ZCL_DIRECTION_SERVER_TO_CLIENT &&
        emberAfContainsClientWithMfgCode(cmd->apsFrame->destinationEndpoint, cmd->apsFrame->clusterId, cmd->mfgCode))
    {
        switch (cmd->apsFrame->clusterId)
        {
        case ZCL_IDENTIFY_CLUSTER_ID :
            result = emberAfIdentifyClusterClientCommandParse(cmd);
            break;
        default:
            // Unrecognized cluster ID, error status will apply.
            break;
        }
    }
    else if (cmd->direction == (uint8_t) ZCL_DIRECTION_CLIENT_TO_SERVER &&
             emberAfContainsServerWithMfgCode(cmd->apsFrame->destinationEndpoint, cmd->apsFrame->clusterId, cmd->mfgCode))
    {
        switch (cmd->apsFrame->clusterId)
        {
        case ZCL_BASIC_CLUSTER_ID :
            // No commands are enabled for cluster Basic
            result = status(false, true, cmd->mfgSpecific);
            break;
        case ZCL_IDENTIFY_CLUSTER_ID :
            result = emberAfIdentifyClusterServerCommandParse(cmd);
            break;
        case ZCL_ON_OFF_CLUSTER_ID :
            result = emberAfOnOffClusterServerCommandParse(cmd);
            break;
        case ZCL_THERMOSTAT_CLUSTER_ID :
            result = emberAfThermostatClusterServerCommandParse(cmd);
            break;
        default:
            // Unrecognized cluster ID, error status will apply.
            break;
        }
    }
    return result;
}

// Cluster specific command parsing

EmberAfStatus emberAfIdentifyClusterClientCommandParse(EmberAfClusterCommand * cmd)
{
    bool wasHandled = false;

    if (!cmd->mfgSpecific)
    {
        switch (cmd->commandId)
        {
        case ZCL_IDENTIFY_QUERY_RESPONSE_COMMAND_ID: {
        uint16_t payloadOffset = cmd->payloadStartIndex;
uint16_t timeout;

  if (cmd->bufLen < payloadOffset + 2)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  timeout = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);

wasHandled = emberAfIdentifyClusterIdentifyQueryResponseCallback(timeout);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            break;
        }
        }
    }
    return status(wasHandled, true, cmd->mfgSpecific);
}
EmberAfStatus emberAfIdentifyClusterServerCommandParse(EmberAfClusterCommand * cmd)
{
    bool wasHandled = false;

    if (!cmd->mfgSpecific)
    {
        switch (cmd->commandId)
        {
        case ZCL_IDENTIFY_COMMAND_ID: {
        uint16_t payloadOffset = cmd->payloadStartIndex;
uint16_t identifyTime;

  if (cmd->bufLen < payloadOffset + 2)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  identifyTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);

wasHandled = emberAfIdentifyClusterIdentifyCallback(identifyTime);
            break;
        }
        case ZCL_IDENTIFY_QUERY_COMMAND_ID: {
        wasHandled = emberAfIdentifyClusterIdentifyQueryCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            break;
        }
        }
    }
    return status(wasHandled, true, cmd->mfgSpecific);
}
EmberAfStatus emberAfOnOffClusterServerCommandParse(EmberAfClusterCommand * cmd)
{
    bool wasHandled = false;

    if (!cmd->mfgSpecific)
    {
        switch (cmd->commandId)
        {
        case ZCL_OFF_COMMAND_ID: {
        wasHandled = emberAfOnOffClusterOffCallback();
            break;
        }
        case ZCL_ON_COMMAND_ID: {
        wasHandled = emberAfOnOffClusterOnCallback();
            break;
        }
        case ZCL_TOGGLE_COMMAND_ID: {
        wasHandled = emberAfOnOffClusterToggleCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            break;
        }
        }
    }
    return status(wasHandled, true, cmd->mfgSpecific);
}
EmberAfStatus emberAfThermostatClusterServerCommandParse(EmberAfClusterCommand * cmd)
{
    bool wasHandled = false;

    if (!cmd->mfgSpecific)
    {
        switch (cmd->commandId)
        {
        case ZCL_CLEAR_WEEKLY_SCHEDULE_COMMAND_ID: {
        wasHandled = emberAfThermostatClusterClearWeeklyScheduleCallback();
            break;
        }
        case ZCL_GET_RELAY_STATUS_LOG_COMMAND_ID: {
        wasHandled = emberAfThermostatClusterGetRelayStatusLogCallback();
            break;
        }
        case ZCL_GET_WEEKLY_SCHEDULE_COMMAND_ID: {
        uint16_t payloadOffset = cmd->payloadStartIndex;
uint8_t daysToReturn;
uint8_t modeToReturn;

  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  daysToReturn = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
  payloadOffset = static_cast<uint16_t>(payloadOffset + 1);
  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  modeToReturn = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);

wasHandled = emberAfThermostatClusterGetWeeklyScheduleCallback(daysToReturn, modeToReturn);
            break;
        }
        case ZCL_SET_WEEKLY_SCHEDULE_COMMAND_ID: {
        uint16_t payloadOffset = cmd->payloadStartIndex;
uint8_t numberOfTransitionsForSequence;
uint8_t dayOfWeekForSequence;
uint8_t modeForSequence;
/* TYPE WARNING: array array defaults to */ uint8_t *  payload;

  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  numberOfTransitionsForSequence = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
  payloadOffset = static_cast<uint16_t>(payloadOffset + 1);
  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  dayOfWeekForSequence = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
  payloadOffset = static_cast<uint16_t>(payloadOffset + 1);
  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  modeForSequence = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
  payloadOffset = static_cast<uint16_t>(payloadOffset + 1);
  payload = cmd->buffer + payloadOffset;

wasHandled = emberAfThermostatClusterSetWeeklyScheduleCallback(numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, payload);
            break;
        }
        case ZCL_SETPOINT_RAISE_LOWER_COMMAND_ID: {
        uint16_t payloadOffset = cmd->payloadStartIndex;
uint8_t mode;
int8_t amount;

  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  mode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
  payloadOffset = static_cast<uint16_t>(payloadOffset + 1);
  if (cmd->bufLen < payloadOffset + 1)
  {
    return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
  }
  amount = static_cast<int8_t>(emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen));

wasHandled = emberAfThermostatClusterSetpointRaiseLowerCallback(mode, amount);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            break;
        }
        }
    }
    return status(wasHandled, true, cmd->mfgSpecific);
}
